cmake_minimum_required(VERSION 3.5)

project(BerEditor
    VERSION 1.5.3
    DESCRIPTION "BerEditor Application"
    LANGUAGES CXX )

set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Set up AUTOMOC and some sensible defaults for runtime execution
# When using Qt 6.3, you can replace the code block below with
# qt_standard_project_setup()
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

find_package(QT NAMES Qt5 Qt6 REQUIRED COMPONENTS Core)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Gui)
find_package(Qt${QT_VERSION_MAJOR} OPTIONAL_COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} OPTIONAL_COMPONENTS PrintSupport Widgets)

set(PROJECT_SRC
    about_dlg.cpp
    auto_update_service.cpp
    ber_applet.cpp
    ber_item.cpp
    ber_item_delegate.cpp
    ber_model.cpp
    ber_tray_icon.cpp
    ber_tree_view.cpp
    cavp_dlg.cpp
    cert_info_dlg.cpp
    cert_pvd_dlg.cpp
    cms_dlg.cpp
    common.cpp
    crl_info_dlg.cpp
    data_encoder_dlg.cpp
    dumpasn1.c
    edit_value_dlg.cpp
    enc_dec_dlg.cpp
    gen_hash_dlg.cpp
    gen_mac_dlg.cpp
    gen_otp_dlg.cpp
    get_uri_dlg.cpp
    i18n_helper.cpp
    insert_ber_dlg.cpp
    insert_data_dlg.cpp
    key_agree_dlg.cpp
    key_man_dlg.cpp
    lcn_info_dlg.cpp
    main.cpp
    mainwindow.cpp
    num_trans_dlg.cpp
    oid_info_dlg.cpp
    pub_enc_dec_dlg.cpp
    settings_dlg.cpp
    settings_mgr.cpp
    sign_verify_dlg.cpp
    sss_dlg.cpp
    ${platform_specific_sources}
)

set( PROJECT_HEADER
    about_dlg.h
    auto_update_service.h
    ber_applet.h
    ber_item.h
    ber_item_delegate.h
    ber_model.h
    ber_tray_icon.h
    ber_tree_view.h
    cavp_dlg.h
    cert_info_dlg.h
    cert_pvd_dlg.h
    cms_dlg.h
    common.h
    crl_info_dlg.h
    data_encoder_dlg.h
    edit_value_dlg.h
    enc_dec_dlg.h
    gen_hash_dlg.h
    gen_mac_dlg.h
    gen_otp_dlg.h
    get_uri_dlg.h
    i18n_helper.h
    insert_ber_dlg.h
    insert_data_dlg.h
    key_agree_dlg.h
    key_man_dlg.h
    lcn_info_dlg.h
    mainwindow.h
    num_trans_dlg.h
    oid_info_dlg.h
    pub_enc_dec_dlg.h
    settings_dlg.h
    settings_mgr.h
    sign_verify_dlg.h
    singleton.h
    sss_dlg.h
    ${platform_specific_headers}
)

set( PROJECT_FORM
    about_dlg.ui
    cavp_dlg.ui
    cert_info_dlg.ui
    cert_pvd_dlg.ui
    cms_dlg.ui
    crl_info_dlg.ui
    data_encoder_dlg.ui
    edit_value_dlg.ui
    enc_dec_dlg.ui
    gen_hash_dlg.ui
    gen_mac_dlg.ui
    gen_otp_dlg.ui
    get_uri_dlg.ui
    insert_ber_dlg.ui
    insert_data_dlg.ui
    key_agree_dlg.ui
    key_man_dlg.ui
    lcn_info_dlg.ui
    mainwindow.ui
    num_trans_dlg.ui
    oid_info_dlg.ui
    pub_enc_dec_dlg.ui
    settings_dlg.ui
    sign_verify_dlg.ui
    sss_dlg.ui
)


set(PROJECT_SOURCES
    ${PROJECT_SRC} ${PROJECT_HEADER} ${PROJECT_FORM}
)

set(RESOURCE ${CMAKE_SOURCE_DIR}/bereditor.qrc)
qt5_add_resources(RESOURCE_ADDED ${RESOURCE})

add_executable(${PROJECT_NAME}
    ${PROJECT_SOURCES}
    ${RESOURCE_ADDED}
    be.rc
)

target_link_options( ${PROJECT_NAME} PRIVATE -mwindows -MD )

# target_compile_definitions( ${PROJECT_NAME} PRIVATE JS_PRO )

if(WIN32)
include_directories( ../../PKILib
    "c:/msys64/mingw64/include"
    ../../PKILib/lib/win64/winsparkle/include )

if(Debug)
    target_link_directories( ${PROJECT_NAME} PRIVATE
    ../../build-PKILib-Desktop_Qt_5_13_2_MinGW_64_bit-Debug
    ../../PKILib/lib/win64/debug/openssl3/lib64
    ../../PKILib/lib/win64/winsparkle/x64/Release
    "C:/msys64/mingw64/lib" )
endif()

if(NOT Debug)
    target_link_directories( ${PROJECT_NAME} PRIVATE
    ../../build-PKILib-Desktop_Qt_5_13_2_MinGW_64_bit-Release
    ../../PKILib/lib/win64/openssl3/lib64
    ../../PKILib/lib/win64/winsparkle/x64/Release
    "C:/msys64/mingw64/lib" )
endif()

target_link_libraries(${PROJECT_NAME} PRIVATE
        Qt${QT_VERSION_MAJOR}::Widgets
	Qt${QT_VERSION_MAJOR}::PrintSupport
        PKILib crypto ssl ltdl ldap lber gmp ws2_32 WinSparkle )

target_compile_definitions( ${PROJECT_NAME} PRIVATE _AUTO_UPDATE )

elseif(APPLE)
    set(CMAKE_MACOSX_BUNDLE ON)
    set(CMAKE_MACOSX_RPATH ON)

    # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
    # generated by CMake. This variable contains the .icns file name,
    # without the path.

    # And the following tells CMake where to find and install the file itself.
    set(app_icon_macos "${CMAKE_CURRENT_SOURCE_DIR}/images/bereditor.icns")
    set_source_files_properties(${app_icon_macos} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)

    set_target_properties( ${PROJECT_NAME},
        MACOSX_BUNDLE_ICON_FILE, bereditor.icns
        MACOSX_BUNDLE_INFO_PLIST Info.plist )

    SET(platform_specific_sources ${platform_specific_sources} mac_sparkle_support.mm)
    SET(platform_specific_headers ${platform_specific_headers} mac_sparkle_support.h)
    SET_SOURCE_FILES_PROPERTIES(mac_sparkle_support.mm PROPERTIES COMPILE_FLAGS -fobjc-arc)
    SET(SPARKLE_FRAMEWORK /usr/local/Sparkle.framework)
    INCLUDE_DIRECTORIES(${SPARKLE_FRAMEWORK}/Headers)


    FIND_LIBRARY(COCOA_LIBRARY Cocoa)
    MARK_AS_ADVANCED (COCOA_LIBRARY)

    include_directories( ../../PKILib
        /usr/local/include )

    if(Debug)
        target_link_directories( ${PROJECT_NAME} PRIVATE
        ../../build-PKILib-Desktop_Qt_5_15_2_clang_64bit-Debug
        ../../PKILib/lib/mac/debug/openssl3/lib
        /usr/local/lib )
    endif()

    if(NOT Debug)
        target_link_directories( ${PROJECT_NAME} PRIVATE
        ../../build-PKILib-Desktop_Qt_5_15_2_clang_64bit-Release
        ../../PKILib/lib/mac/openssl3/lib
        /usr/local/lib )
    endif()

    target_link_libraries(${PROJECT_NAME} PRIVATE
        Qt${QT_VERSION_MAJOR}::Widgets
	Qt${QT_VERSION_MAJOR}::PrintSupport
        PKILib crypto ssl ltdl ldap lber gmp "-framework Sparkle" )

    target_compile_definitions( ${PROJECT_NAME} PRIVATE _AUTO_UPDATE )

elseif(LINUX)
    include_directories( ../../PKILib
        "/usr/local/include"
        ../../PKILib/lib/win64/winsparkle/include )

    if(Debug)
        target_link_directories( ${PROJECT_NAME} PRIVATE
        ../../build-PKILib-Desktop_Qt_5_13_2_MinGW_64_bit-Debug
        ../../PKILib/lib/win64/debug/openssl3/lib64
        ../../PKILib/lib/win64/winsparkle/x64/Release
        "/usr/local/lib" )
    endif()

    if(NOT Debug)
        target_link_directories( ${PROJECT_NAME} PRIVATE
        ../../build-PKILib-Desktop_Qt_5_13_2_MinGW_64_bit-Release
        ../../PKILib/lib/win64/openssl3/lib64
        ../../PKILib/lib/win64/winsparkle/x64/Release
        "/usr/local/lib" )
    endif()

    target_link_libraries(${PROJECT_NAME} PRIVATE
        Qt${QT_VERSION_MAJOR}::Widgets
	Qt${QT_VERSION_MAJOR}::PrintSupport
        PKILib crypto ssl ltdl ldap lber gmp )
endif()

target_compile_definitions( ${PROJECT_NAME} PRIVATE
    BER_EDITOR_VERSION=${PROJECT_VERSION}
    QT_DEPRECATED_WARNINGS
)


find_package(Qt5 COMPONENTS Widgets LinguistTools REQUIRED)
set(TS_FILES bereditor_ko_KR.ts)
qt5_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})

if(WIN32)
    install( TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin )
elseif(APPLE)
    install( TARGETS ${PROJECT_NAME} BUNDLE DESTINATION . RUNTIME DESTINATION . )
elseif(LINUX)
    install( TARGETS ${PROJECT_NAME} RUNTIME_DESTINATION bin )
endif()
